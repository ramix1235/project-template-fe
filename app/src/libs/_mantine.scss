// https://mantine.dev/styles/sass/#usage-with-vite

@use 'sass:math';

@function rem($value) {
  @return #{math.div(math.div($value, $value * 0 + 1), 16)}rem;
}

@function em($value) {
  @return #{math.div(math.div($value, $value * 0 + 1), 16)}em;
}

/*
  Define variables for breakpoints, values must be the same as in theme.

  About breakpoints: https://mantine.dev/styles/responsive/#configure-breakpoints
  Why 'em' units: https://mantine.dev/styles/rem/#em-units
*/
$mantine-breakpoint-xs: em(576px); // Extra small devices (portrait phones, less than 576px)
$mantine-breakpoint-sm: em(768px); // Small devices (landscape phones, less than 768px)
$mantine-breakpoint-md: em(992px); // Medium devices (tablets, less than 992px)
$mantine-breakpoint-lg: em(1200px); // Large devices (desktops, less than 1200px)
$mantine-breakpoint-xl: em(1408px); // Extra large devices (large desktops) (less than 1408px)

@mixin light {
  [data-mantine-color-scheme='light'] & {
    @content;
  }
}

@mixin dark {
  [data-mantine-color-scheme='dark'] & {
    @content;
  }
}

@mixin hover {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }

  @media (hover: none) {
    &:active {
      @content;
    }
  }
}

/*
  Why subtract 0.1px?

  Browsers donâ€™t currently support range context queries (https://www.w3.org/TR/mediaqueries-4/#range-context),
  so we work around the limitations of min- and max- prefixes (https://www.w3.org/TR/mediaqueries-4/#mq-min-max)
  and viewports with fractional widths (which can occur under certain conditions on high-dpi devices, for instance)
  by using values with higher precision.
*/
@mixin smaller-than($breakpoint) {
  // stylelint-disable-next-line media-feature-range-notation
  @media (max-width: calc(#{$breakpoint} - em(0.1px))) {
    @content;
  }
}

@mixin larger-than($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

// Add direction mixins if you need rtl support
@mixin rtl {
  [dir='rtl'] & {
    @content;
  }
}

@mixin ltr {
  [dir='ltr'] & {
    @content;
  }
}
